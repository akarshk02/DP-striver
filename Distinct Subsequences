// Problem Link: https://www.codingninjas.com/studio/problems/subsequence-counting_3755256

//Simple Recursion
#include <bits/stdc++.h> 
int MOD=1e9+7;
int fun(int i, int j, string t, string s){

    if(j<0)
     return 1;
    if(i<0)
     return 0;

    if(t[i]==s[j])
     return (fun(i-1,j-1,t,s)%MOD+fun(i-1,j,t,s)%MOD)%MOD;

    return fun(i-1,j,t,s)%MOD;    
}

int subsequenceCounting(string &t, string &s, int lt, int ls) {
    // Write your code here.
    return fun(lt-1,ls-1,t,s);
} 


// Recursion with Memoization ~ Top down Approach
#include <bits/stdc++.h> 
int MOD=1e9+7;
int fun(int i, int j, string t, string s, vector<vector<int>>&dp){

    if(j<0)
     return 1;
    if(i<0)
     return 0;

    if(dp[i][j]!=-1)
     return dp[i][j]; 

    if(t[i]==s[j])
     return dp[i][j]=(fun(i-1,j-1,t,s,dp)%MOD+fun(i-1,j,t,s,dp)%MOD)%MOD;

    return dp[i][j]=fun(i-1,j,t,s,dp)%MOD;    
}

int subsequenceCounting(string &t, string &s, int lt, int ls) {
    // Write your code here.   
    vector<vector<int>>dp(lt,vector<int>(ls,-1));
    return fun(lt-1,ls-1,t,s,dp);
} 


// Bottom up Approach ~ Tabulation
int subsequenceCounting(string &t, string &s, int lt, int ls) {
    // Write your code here.
    
    vector<vector<int>>dp(lt+1,vector<int>(ls+1,0));
    
    for(int i=0;i<=lt;i++)
      dp[i][0]=1;

    for(int i=1;i<=lt;i++){
        for(int j=1;j<=ls;j++){
            if(t[i-1]==s[j-1])
             dp[i][j]=(dp[i-1][j-1]%MOD+dp[i-1][j]%MOD)%MOD;
            else
             dp[i][j]=dp[i-1][j]%MOD; 
        }
    }  

    return dp[lt][ls];
} 

**See 1D Array Optimisation Technique 
