//Problem link: https://www.codingninjas.com/studio/problems/edit-distance_630420

//Simple Recursion 
int fun(int i, int j, string &s1, string &s2){

    if(i<0) return j+1;
    if(j<0) return i+1;

    if(s1[i]==s2[j])
      return fun(i-1,j-1,s1,s2);

     return 1+min(fun(i-1,j,s1,s2),  //delete 
                   min(fun(i,j-1,s1,s2),  // insert
                        fun(i-1,j-1,s1,s2))); // replace 
}

int editDistance(string str1, string str2)
{
    //write you code here
    int n=str1.length();
    int m=str2.length();
    return fun(n-1,m-1,str1,str2);
}


// Recursion with Memoization ~ Top down Approach
int fun(int i, int j, string &s1, string &s2, vector<vector<int>>&dp){

    if(i<0) return j+1;
    if(j<0) return i+1;

    if(dp[i][j]!=-1)
      return dp[i][j];

    if(s1[i]==s2[j])
      return dp[i][j]=fun(i-1,j-1,s1,s2,dp);

     return dp[i][j]=1+min(fun(i-1,j,s1,s2,dp),  //delete 
                   min(fun(i,j-1,s1,s2,dp),  // insert
                        fun(i-1,j-1,s1,s2,dp))); // replace 
}

int editDistance(string str1, string str2)
{
    //write you code here
    int n=str1.length();
    int m=str2.length();
    vector<vector<int>>dp(n,vector<int>(m,-1));

    return fun(n-1,m-1,str1,str2,dp);
}


// Bottom up Approach ~ Tabulation 
int editDistance(string str1, string str2)
{
    //write you code here
    int n=str1.length();
    int m=str2.length();
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));

    for(int j=0;j<=m;j++)
     dp[0][j]=j;

    for(int i=0;i<=n;i++)
     dp[i][0]=i;


    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1])
             dp[i][j]=dp[i-1][j-1];
            else{
               dp[i][j]=1+min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1])); 
            }  
        }
    } 

    return dp[n][m];  
}


** See 1D Array optimisation solution
