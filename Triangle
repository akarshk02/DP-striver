// Problem link: https://www.codingninjas.com/codestudio/problems/triangle_1229398

// Simple Recursion 
int fun(int i, int j, vector<vector<int>>&triangle){
	if(i==triangle.size()-1){
		return triangle[i][j];
	}

	if(j>i) return 0;

	int down=triangle[i][j]+fun(i+1,j,triangle);
	int diagonal=triangle[i][j]+fun(i+1,j+1,triangle);

	return min(down,diagonal);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
	int m=triangle[n-1].size();
    return fun(0,0,triangle);

}

// Recursion with Memoization ~ Top down Approach
int fun(int i, int j, vector<vector<int>>&triangle, vector<vector<int>>&dp){
	if(i==triangle.size()-1){
		return triangle[i][j];
	}

	if(j>i) return 0;

	if(dp[i][j]!=-1)
	 return dp[i][j];

	int down=triangle[i][j]+fun(i+1,j,triangle,dp);
	int diagonal=triangle[i][j]+fun(i+1,j+1,triangle,dp);

	return dp[i][j]=min(down,diagonal);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
	int m=triangle[n-1].size();
	vector<vector<int>>dp(n,vector<int>(m,-1));
    return fun(0,0,triangle,dp);
}


// Bottom up Approach
int minimumPathSum(vector<vector<int>> &triangle, int n) {
  // Write your code here.
  int m = triangle[n - 1].size();
  vector<vector<int>> dp(n, vector<int>(m, 0));

  for (int i = 0; i < n; i++) {
    for (int j = 0; j <=i; j++) {

      if (i == 0 and j == 0)
        dp[i][j] = triangle[i][j];

      else {
        int down = INT_MAX, diagonal = INT_MAX;
        if (i > 0 and i!=j)
          down = triangle[i][j] + dp[i - 1][j];
        if (j > 0)
          diagonal = triangle[i][j] + dp[i - 1][j - 1];

        dp[i][j] = min(down, diagonal);
      }
    }
  }
  int ans=INT_MAX;
  for(int j=0;j<n;j++){
    ans=min(ans,dp[n-1][j]);
  } 

  return ans;
}
