// Problem link: https://www.codingninjas.com/studio/problems/0-1-knapsack_920542

// Simple Recursion 
#include <bits/stdc++.h> 
int fun(int ind, int W, vector<int>&weight, vector<int>&value){

	if(ind==0){
		if(weight[ind]<=W)
		 return value[ind];
		else
		 return 0; 
	}

	int notake=fun(ind-1,W,weight,value);
	int take=INT_MIN;
	if(weight[ind]<=W)
	  take=value[ind]+fun(ind-1,W-weight[ind],weight,value);

	return max(take,notake);  
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here
	return fun(n-1,maxWeight,weight,value);
}


// Recursion with Memoization ~ Top down Approach
int fun(int ind, int W, vector<int>&weight, vector<int>&value, vector<vector<int>>&dp){

	if(ind==0){
		if(weight[ind]<=W)
		 return value[ind];
		else
		 return 0; 
	}
    
	if(dp[ind][W]!=-1)
	 return dp[ind][W];
	  
	int notake=fun(ind-1,W,weight,value,dp);
	int take=INT_MIN;
	if(weight[ind]<=W)
	  take=value[ind]+fun(ind-1,W-weight[ind],weight,value,dp);

	return dp[ind][W]=max(take,notake);  
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here
	vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
	return fun(n-1,maxWeight,weight,value,dp);
}


// Bottom up Approach
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here
	vector<vector<int>>dp(n,vector<int>(maxWeight+1,0));
    
	for(int i=0;i<n;i++){
		dp[i][0]=0;
	}

	for(int i=weight[0];i<=maxWeight;i++){
		dp[0][i]=value[0];
	}

	for(int i=1;i<n;i++){
		for(int j=1;j<=maxWeight;j++){
			int notake=dp[i-1][j];
			int take=INT_MIN;
			if(weight[i]<=j)
			 take=value[i]+dp[i-1][j-weight[i]];

			dp[i][j]=max(take,notake); 
		}
	}

	return dp[n-1][maxWeight];
}
