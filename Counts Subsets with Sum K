// Problem Link: https://www.codingninjas.com/studio/problems/number-of-subsets_3952532

// Simple Recursion 
#define MOD 1000000007
int fun(int ind, int target, vector<int>&arr){

	if(target==0)
	 return 1;

	if(ind==0) 
	  return arr[0]==target;

	int notake=fun(ind-1,target,arr);
	int take=0;
	if(arr[ind]<=target)
	 take=fun(ind-1,target-arr[ind],arr);

	return (take%MOD + notake%MOD)%MOD;    
}

int findWays(vector<int>& arr, int k)
{
	// Write your code here.
	int n=arr.size();
	return fun(n-1,k,arr);
}


// Recursion with Memoization ~ Top down Approach
#define MOD 1000000007
int fun(int ind, int target, vector<int> &arr, vector<vector<int>> &dp) {

  if (target == 0)
    return 1;

  if (ind == 0)
    return arr[0] == target;

  if (dp[ind][target] != -1)
    return dp[ind][target];

  int notake = fun(ind - 1, target, arr, dp);
  int take = 0;
  if (arr[ind] <= target)
    take = fun(ind - 1, target - arr[ind], arr, dp);

  return dp[ind][target] = (take%MOD + notake%MOD)%MOD;
}

int findWays(vector<int> &arr, int k) {
  // Write your code here.
  int n = arr.size();
  vector<vector<int>> dp(n, vector<int>(k + 1, -1));
  return fun(n - 1, k, arr, dp);
}


// Bottom up Approach
#define MOD 1000000007
int findWays(vector<int> &arr, int k) {
  // Write your code here.
  int n = arr.size();
  vector<vector<int>> dp(n, vector<int>(k + 1, 0));
  
  for(int i=0;i<n;i++){
	  dp[i][0]=1;
  }

  if(arr[0]<=k) 
     dp[0][arr[0]]=1;

  for(int i=1;i<n;i++){
	  for(int j =1;j<=k;j++){

		  int notake=dp[i-1][j];
		  int take=0;
		  if(arr[i]<=j)
		   take=dp[i-1][j-arr[i]];

		 dp[i][j]=(take%MOD+notake%MOD)%MOD;  
	  }
  }

  return dp[n-1][k];
}


Above all the code is written by taking constraint 1<=arr[i]<=10^4 .
i.e., array does not contain zero as element.
Now let suppose constraint are changed - 0<=arr[i]<=10^4 

only the base case will change and remaining is same. 

#define MOD 1000000007
int fun(int ind, int target, vector<int> &arr, vector<vector<int>> &dp) {

if(ind==0) {
  if(sum==0 and arr[0]==0) return 2;
  if(sum==0 or sum==arr[0]) return 1;
  return 0;
}

  if (dp[ind][target] != -1)
    return dp[ind][target];

  int notake = fun(ind - 1, target, arr, dp);
  int take = 0;
  if (arr[ind] <= target)
    take = fun(ind - 1, target - arr[ind], arr, dp);

  return dp[ind][target] = (take%MOD + notake%MOD)%MOD;
}

dry run for : input: arr[0,0,1] and sum=1
               output: 4
