// Problem link: https://www.codingninjas.com/studio/problems/ways-to-make-coin-change_630471

// Simple Recursion 
long fun(int ind, int target, int *denominations){

    if(ind==0){
        return (target%denominations[ind]==0);
    }

    long notake=fun(ind-1,target,denominations);
    long take=0;
    if(denominations[ind]<=target)
     take=fun(ind, target-denominations[ind], denominations);

     return notake+take; 
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    //Write your code here
    return fun(n-1,value,denominations);
}


// Recursion with Memoization ~ Top down Approach
#include "bits/stdc++.h"
long fun(int ind, int target, int *denominations, vector<vector<long>>&dp){

    if(ind==0){

        return (target%denominations[ind]==0);
    }

    if(dp[ind][target]!=-1)
      return dp[ind][target];

    long notake=fun(ind-1,target,denominations,dp);
    long take=0;
    if(denominations[ind]<=target)
     take=fun(ind, target-denominations[ind], denominations,dp);

     return dp[ind][target]=notake+take; 
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    //Write your code here
    vector<vector<long>>dp(n,vector<long>(value+1,-1));
    return fun(n-1,value,denominations,dp);
}


// Bottom up Approach
#include "bits/stdc++.h"
long countWaysToMakeChange(int *denominations, int n, int value)
{
    //Write your code here
    vector<vector<long>>dp(n,vector<long>(value+1,0));

    for(int i=0;i<=value;i++){
         if(i%denominations[0]==0)
           dp[0][i]=1;
    }

  for(int i=1;i<n;i++){
      for(int j=0;j<=value;j++){

            long notake=dp[i-1][j];
            long take=0;
            if(denominations[i]<=j)
             take=dp[i][j-denominations[i]];

            dp[i][j]=take+notake; 
        }
    }

    return dp[n-1][value];
}
