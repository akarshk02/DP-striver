// Problem Link: https://www.codingninjas.com/studio/problems/buy-and-sell-stock_1071012

//Simple Recursion
#include <bits/stdc++.h> 
int fun(int ind, int buy, int cap, int n, vector<int>&prices){

    if(ind==n or cap==0)
      return 0;
    
    int profit=0;
    if(buy==1){
       profit=max(-prices[ind]+fun(ind+1,0,cap,n,prices),fun(ind+1,1,cap,n,prices));
    }  
    else{
       profit=max(prices[ind]+fun(ind+1,1,cap-1,n,prices),fun(ind+1,0,cap,n,prices)); 
    }

    return profit;
}

int maxProfit(vector<int>& prices, int n)
{
    // Write your code here.
    return fun(0,1,2,n,prices);
}


// Recursion with Memoization ~ Top down Approach
#include <bits/stdc++.h> 
int fun(int ind, int buy, int cap, int n, vector<int>&prices, vector<vector<vector<int>>>&dp){

    if(ind==n or cap==0)
      return 0;
    
    if(dp[ind][buy][cap]!=-1)
        return dp[ind][buy][cap];

    int profit=0;
    if(buy==1){
       profit=max(-prices[ind]+fun(ind+1,0,cap,n,prices,dp),fun(ind+1,1,cap,n,prices,dp));
    }  
    else{
       profit=max(prices[ind]+fun(ind+1,1,cap-1,n,prices,dp),fun(ind+1,0,cap,n,prices,dp)); 
    }

    return dp[ind][buy][cap]=profit;
}

int maxProfit(vector<int>& prices, int n)
{
    // Write your code here.
    vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
    return fun(0,1,2,n,prices,dp);
}


// Bottom up Approach ~ Tabulation
int maxProfit(vector<int> &prices, int n) {
  // Write your code here.
  vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(3, 0)));

  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j <= 1; j++) {
      for (int k = 1; k <= 2; k++) {
        int profit = 0;
        if (j == 1) {
          profit = max(-prices[i] + dp[i + 1][0][k], dp[i + 1][1][k]);
        } else {
          profit = max(prices[i] + dp[i + 1][1][k - 1], dp[i + 1][0][k]);
        }

        dp[i][j][k] = profit;
      }
    }
  }
  return dp[0][1][2];
}
