// Problem Link: https://www.codingninjas.com/studio/problems/rod-cutting-problem_800284

// Simple Recursion 
int fun(int ind, int N, vector<int>&price){  
	if(ind==0){
		return N*price[0];  
	}

	int notake=fun(ind-1,N,price);
	int take=INT_MIN;
	int rodLength=ind+1;
	if(rodLength<=N)
	  take=price[ind]+fun(ind,N-rodLength,price);

	return max(take,notake);   
}
int cutRod(vector<int> &price, int n)
{
	// Write your code here.
	return fun(n-1,n,price);
}

// Recursion with Memoization ~ Top down Approach
int fun(int ind, int N, vector<int>&price, vector<vector<int>>&dp){ 
	if(ind==0){
		return N*price[0];  
	}

	if(dp[ind][N]!=-1)
	 return dp[ind][N];

	int notake=fun(ind-1,N,price,dp);
	int take=INT_MIN;
	int rodLength=ind+1;
	if(rodLength<=N)
	  take=price[ind]+fun(ind,N-rodLength,price,dp);

	return dp[ind][N]=max(take,notake);   
}
int cutRod(vector<int> &price, int n)
{
	// Write your code here.
	vector<vector<int>>dp(n,vector<int>(n+1,-1));
	return fun(n-1,n,price,dp);

}


// Bottom up Approach
int cutRod(vector<int> &price, int n) {
  // Write your code here.
  vector<vector<int>> dp(n, vector<int>(n + 1, 0));

  for (int i = 0; i <= n; i++)
    dp[0][i] = price[0] * i;

  for (int i = 1; i < n; i++) {
    for (int j = 0; j <= n; j++) {

      int notake = dp[i - 1][j];
      int take = INT_MIN;
      int rodLength = i + 1;
      if (rodLength <= j)
        take = price[i] + dp[i][j - rodLength];

      dp[i][j] = max(notake, take);
    }
  }
  return dp[n - 1][n];
}


