// Problem Link: https://www.codingninjas.com/codestudio/problems/minimum-path-sum_985349

// Simple Recursion 
#include <bits/stdc++.h>
int mx=INT_MAX;
int fun(int i, int j, vector<vector<int>>&grid){

    if(i==0 and j==0){
        return grid[i][j];
    }

    if(i<0 or j<0) 
      return mx;

    int up=fun(i-1,j,grid);
    int left=fun(i,j-1,grid);

    return grid[i][j]+min(up,left);
}

int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();

    return fun(n-1,m-1,grid);
    
}

// Recursion with Memoization ~ Top down Approach
#include <bits/stdc++.h>
int mx=INT_MAX;
int fun(int i, int j, vector<vector<int>>&grid, vector<vector<int>>&dp){

    if(i==0 and j==0){
        return grid[i][j];
    }

    if(i<0 or j<0) 
      return mx;
    if(dp[i][j]!=-1)
      return dp[i][j];

    int up=fun(i-1,j,grid,dp);
    int left=fun(i,j-1,grid,dp);

    return dp[i][j]=grid[i][j]+min(up,left);
}

int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();

    vector<vector<int>>dp(n,vector<int>(m,-1));

    return fun(n-1,m-1,grid,dp);
    
}

// Bottom up Approach
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();

    vector<vector<int>>dp(n,vector<int>(m,0));

    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        if(i==0 and j==0) dp[i][j]=grid[i][j];
        else {
           int up=INT_MAX,left=INT_MAX;
          if(i>0) up=grid[i][j]+dp[i-1][j];
          if(j>0) left=grid[i][j]+dp[i][j-1];
          dp[i][j]=min(up,left);
        }
      }
    }
    
    return dp[n-1][m-1];
}
