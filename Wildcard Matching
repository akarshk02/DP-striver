//Problem Link: https://www.codingninjas.com/studio/problems/wildcard-pattern-matching_701650

// Simple Recursion 
bool fun(int i, int j, string &pattern, string &text){

   if(i<0 and j<0) return true;
   if(i<0 and j>=0) return false;
   if(j<0 and i>=0){
       for(int k=0;k<=i;k++){
          if(pattern[k]!='*')
           return false; 
       }
       return true;
   }

   if(pattern[i]==text[j] or pattern[i]=='?')
     return fun(i-1,j-1,pattern,text);

   if(pattern[i]=='*')
     return fun(i-1,j,pattern,text) or fun(i,j-1,pattern,text);

   return false;    
}

bool wildcardMatching(string pattern, string text)
{ 
   // Write your code here.
   int n=pattern.length();
   int m=text.length();

   return fun(n-1,m-1,pattern,text);
    
}


// Recursion with Memoization ~ Top down Approach
#include "bits/stdc++.h"
bool fun(int i, int j, string &pattern, string &text, vector<vector<int>>&dp){

   if(i<0 and j<0) return true;
   if(i<0 and j>=0) return false;
   if(j<0 and i>=0){
       for(int k=0;k<=i;k++){
          if(pattern[k]!='*')
           return false; 
       }
       return true;
   }

   if(dp[i][j]!=-1)
    return dp[i][j];

   if(pattern[i]==text[j] or pattern[i]=='?')
     return dp[i][j]=fun(i-1,j-1,pattern,text,dp);

   if(pattern[i]=='*')
     return dp[i][j]=fun(i-1,j,pattern,text,dp) or fun(i,j-1,pattern,text,dp);

   return dp[i][j]=false;    
}

bool wildcardMatching(string pattern, string text)
{  
   // Write your code here. 
   int n=pattern.length();
   int m=text.length();
   vector<vector<int>>dp(n,vector<int>(m,-1));
   return fun(n-1,m-1,pattern,text,dp);
   
}


// Bottom up Approach
bool wildcardMatching(string pattern, string text) {
  // Write your code here.
  int n = pattern.length();
  int m = text.length();
  vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, 0));

  dp[0][0] = true;

  for (int j = 1; j <= m; j++)
    dp[0][j] = false;

  for (int i = 1; i <= n; i++) {
    bool flag = true;
    for (int k = 1; k <= i; k++) {
      if (pattern[k - 1] != '*') {
        flag = false;
        break;
      }
    }
    dp[i][0] = flag;
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      if (pattern[i - 1] == text[j - 1] or pattern[i - 1] == '?')
        dp[i][j] = dp[i - 1][j - 1];
      else if (pattern[i - 1] == '*')
        dp[i][j] = dp[i - 1][j] or dp[i][j - 1];
      else
        dp[i][j] = false;
    }
  }

  return dp[n][m];
}

