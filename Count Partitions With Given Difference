// Problem link: https://www.codingninjas.com/studio/problems/partitions-with-given-difference_3751628

// Simple Recursion 
int fun(int ind, int target, vector<int>&arr){
    
    if(ind==0){
        if(target==0 and arr[0]==0)
         return 2;
        if(target==0 or arr[0]==target)
         return 1;

        return 0;  
   }
    
    int notake=fun(ind-1,target,arr);
    int take=0;
    if(arr[ind]<=target)
     take=fun(ind-1,target-arr[ind],arr);
     
     return (take+notake);
} 


int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    
    if((sum-d)<0 or (sum-d)%2!=0) return 0;
    
    int k=(sum-d)/2;
    
    return fun(n-1,k,arr);
    
}

// Recursion with Memoization ~ Top down Approach
#include <bits/stdc++.h> 
int MOD=1e9+7;
int fun(int ind, int target, vector<int>&arr, vector<vector<int>>&dp){
    
    if(ind==0){
        if(target==0 and arr[0]==0)
         return 2;
        if(target==0 or arr[0]==target)
         return 1;

        return 0;  
    }

    if(dp[ind][target]!=-1)
     return dp[ind][target];
    
    int notake=fun(ind-1,target,arr,dp);
    int take=0;
    if(arr[ind]<=target)
     take=fun(ind-1,target-arr[ind],arr,dp);
     
     return dp[ind][target]=(take%MOD+notake%MOD)%MOD;
} 


int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    
    if((sum-d)<0 or (sum-d)%2!=0) return 0;
    
    int k=(sum-d)/2;

    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    
    return fun(n-1,k,arr,dp);
    
}


// Bottom up Approach
#include <bits/stdc++.h> 
int MOD=1e9+7;
int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    
    if((sum-d)<0 or (sum-d)%2!=0) return 0;
    
    int k=(sum-d)/2;
 
    vector<vector<int>>dp(n,vector<int>(k+1,0));

    if(arr[0]==0) dp[0][0]=2;
    else dp[0][0]=1;

    if(arr[0]!=0 and arr[0]<=k) dp[0][arr[0]]=1;     
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=k;j++){

            int notake=dp[i-1][j];
            int take=0;
            if(arr[i]<=j)
              take=dp[i-1][j-arr[i]];

           dp[i][j]=(take%MOD+notake%MOD)%MOD;   
        }
    }
     
    return dp[n-1][k]; 
}







