// Problem Link: https://www.codingninjas.com/codestudio/problems/total-unique-paths_1081470

// Simple Recursion 
int fun(int i, int j){
	if(i==0 and j==0) // Base Case
	 return 1;

	if(i<0 or j<0)
	 return 0;

	int up=fun(i-1,j);
	int left=fun(i,j-1);

	return up+left;  
}

int uniquePaths(int m, int n) {
	// Write your code here.
	return fun(m-1,n-1);
}

// Recursion with Memoization ~ Top down Approach
int fun(int i, int j, vector<vector<int>>&dp){
	if(i==0 and j==0)
	 return 1;

	if(i<0 or j<0)
	 return 0;
    
	if(dp[i][j]!=-1)
	  return dp[i][j];

	int up=fun(i-1,j,dp);
	int left=fun(i,j-1,dp);

	return dp[i][j]=up+left;  
}

int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int>>dp(m,vector<int>(n,-1));
	return fun(m-1,n-1,dp);
}

// Bottom up Approach
int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m,vector<int>(n,0));
    
	for(int i=0;i<m;i++){
		     dp[i][0]=1;
	}
	for(int j=0;j<n;j++){
        dp[0][j]=1;
	}
	for(int i=1;i<m;i++){
		for(int j=1;j<n;j++){
           dp[i][j]=dp[i-1][j]+dp[i][j-1];
		}
	}

	return dp[m-1][n-1];
}



