// Problem Link: https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998

// Simple Recursion 
int fun(int i, int j, vector<vector<int>> &matrix) {
  
  if (j < 0 or j >= matrix[0].size())   //Please note that this condition(base) should be written first.
    return -1e8;

  if (i == 0)
    return matrix[i][j];

  int up = matrix[i][j] + fun(i - 1, j, matrix);
  int dleft = matrix[i][j] + fun(i - 1, j - 1, matrix);
  int dright = matrix[i][j] + fun(i - 1, j + 1, matrix);

  return max(up, max(dleft, dright));
}

int getMaxPathSum(vector<vector<int>> &matrix) {
  //  Write your code here.
  int n = matrix.size();
  int m = matrix[0].size();

  int ans = -1e8;
  for (int j = 0; j < m; j++) {
    ans = max(ans, fun(n - 1, j, matrix));
  }
  return ans;
}

// Recursion with Memoization ~ Top down Approach
int fun(int i, int j, vector<vector<int>> &matrix, vector<vector<int>>&dp) {
  
  if (j < 0 or j >= matrix[0].size())
    return -1e8;

  if (i == 0)
    return matrix[i][j];

  if(dp[i][j]!=-1)
   return dp[i][j];   

  int up = matrix[i][j] + fun(i - 1, j, matrix, dp);
  int dleft = matrix[i][j] + fun(i - 1, j - 1, matrix, dp);
  int dright = matrix[i][j] + fun(i - 1, j + 1, matrix, dp);

  return dp[i][j]=max(up, max(dleft, dright));
}

int getMaxPathSum(vector<vector<int>> &matrix) {
  //  Write your code here.
  int n = matrix.size();
  int m = matrix[0].size();
  vector<vector<int>>dp(n,vector<int>(m,-1));
  int ans = -1e8;
  for (int j = 0; j < m; j++) {
    ans = max(ans, fun(n - 1, j, matrix, dp));
  }
  return ans;
}

// Bottom up Approach
int getMaxPathSum(vector<vector<int>> &matrix) {
  //  Write your code here.
  int n = matrix.size();
  int m = matrix[0].size();
  vector<vector<int>>dp(n,vector<int>(m,0));  
     
   for(int j=0;j<m;j++){      // setting the base cases
        dp[0][j]=matrix[0][j];  
      }
      
       for(int i=1;i<n;i++){
         for(int j=0;j<m;j++){
                int up,dleft,dright;
                dleft=dright=-1e8;
                up=matrix[i][j]+dp[i-1][j];
                if(j>0) dleft=matrix[i][j]+dp[i-1][j-1];
                if(j+1<m) dright=matrix[i][j]+dp[i-1][j+1]; 

                dp[i][j]= max(up, max(dleft, dright));
             } 
         }
        
   int ans=-1e8;
   for(int j=0;j<m;j++){
      ans=max(ans,dp[n-1][j]); 
   }

   return ans;
}
