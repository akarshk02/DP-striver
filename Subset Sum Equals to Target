// Problem Link: https://www.codingninjas.com/studio/problems/subset-sum-equal-to-k_1550954

// Simple Recursion 
bool fun(int ind, int target, vector<int>&arr){

      if(target==0) return true; 

      if(ind==0) return (arr[0]==target);

      bool noTake=fun(ind-1,target,arr);
      bool take=false;

      if(arr[ind]<=target)
       take=fun(ind-1,target-arr[ind],arr);

      return (noTake||take);  
  }
 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    return fun(n-1,k,arr);
}

// Recursion with Memoization ~ Top down Approach
 bool fun(int ind, int target, vector<int>&arr, vector<vector<int>>&dp){

      if(target==0) return true; 

      if(ind==0) return (arr[0]==target);
      
      if(dp[ind][target]!=-1)
       return dp[ind][target];

      bool noTake=fun(ind-1,target,arr,dp);
      bool take=false;

      if(arr[ind]<=target)
       take=fun(ind-1,target-arr[ind],arr,dp);

     return dp[ind][target]=(noTake||take);  
  }
 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    return fun(n-1,k,arr,dp);
}

// Bottom up Approach
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));

    for(int i=0;i<n;i++)
     dp[i][0]=true;

    dp[0][arr[0]]=true;

    for(int ind=1;ind<n;ind++){
        for(int target=1;target<k+1;target++){

            bool noTake=dp[ind-1][target];
            bool take=false;

            if(arr[ind]<=target)
             take=dp[ind-1][target-arr[ind]];

            dp[ind][target]=noTake||take; 
        }
    }  

    return dp[n-1][k];
}
