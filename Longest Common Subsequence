// Problem link: https://www.codingninjas.com/studio/problems/longest-common-subsequence_624879

// Simple Recursion 
int fun(int ind1, int ind2, string s, string t){

	if(ind1<0 or ind2<0)
	  return 0;

	if(s[ind1]==t[ind2])
	 return 1+fun(ind1-1,ind2-1,s,t);

	return max(fun(ind1-1,ind2,s,t),fun(ind1,ind2-1,s,t));   
}

int lcs(string s, string t)
{
	//Write your code here
	int n=s.length();
	int m=t.length();
  return fun(n-1,m-1,s,t);
}


// Recursion with Memoization ~ Top down Approach
#include "bits/stdc++.h"
int fun(int ind1, int ind2, string s, string t, vector<vector<int>>&dp){

	if(ind1<0 or ind2<0)
	  return 0;
    
	if(dp[ind1][ind2]!=-1)
	  return dp[ind1][ind2];

	if(s[ind1]==t[ind2])
	 return dp[ind1][ind2]=1+fun(ind1-1,ind2-1,s,t,dp);

	return dp[ind1][ind2]=max(fun(ind1-1,ind2,s,t,dp),fun(ind1,ind2-1,s,t,dp));   
}

int lcs(string s, string t)
{
	//Write your code here
	int n=s.length();
	int m=t.length();

	vector<vector<int>>dp(n,vector<int>(m,-1));
  return fun(n-1,m-1,s,t,dp);
}


// Bottom up Approach ~ Tabulation
#include "bits/stdc++.h"
int lcs(string s, string t)
{
	//Write your code here
	int n=s.length();
	int m=t.length();

	vector<vector<int>>dp(n+1,vector<int>(m+1,-1));

	for(int i=0;i<=m;i++){
		  dp[0][i]=0;
	}

	for(int i=0;i<=n;i++){
		 dp[i][0]=0;
	}

	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			if(s[i-1]==t[j-1])
			 dp[i][j]=1+dp[i-1][j-1];
     else
			 dp[i][j]=max(dp[i-1][j],dp[i][j-1]); 
		}
	}

    return dp[n][m];
}
