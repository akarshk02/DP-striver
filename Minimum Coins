// Problem Link: https://www.codingninjas.com/studio/problems/minimum-elements_3843091

// Simple Recursion 
#include <bits/stdc++.h> 
int fun(int ind, int x, vector<int>&arr){
    if(ind==0){
        if(x%arr[0]==0) 
          return x/arr[0];
        else
          return 1e9;  
    }

    int notake=fun(ind-1,x,arr);
    int take=1e9;
    if(arr[ind]<=x)
      take=1+fun(ind,x-arr[ind],arr);

     return min(take,notake);  
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    int n=num.size();
    int ans=fun(n-1,x,num);
    if(ans>=1e9)
     return -1;
    else
     return ans; 
}


// Recursion with Memoization ~ Top down Approach
#include <bits/stdc++.h> 
int fun(int ind, int x, vector<int>&arr, vector<vector<int>>&dp){
    if(ind==0){
        if(x%arr[0]==0) 
          return x/arr[0];
        else
          return 1e9;  
    }
    
    if(dp[ind][x]!=-1)
     return dp[ind][x];

    int notake=fun(ind-1,x,arr,dp);
    int take=1e9;
    if(arr[ind]<=x)
      take=1+fun(ind,x-arr[ind],arr,dp);

     return dp[ind][x]=min(take,notake);  
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(n,vector<int>(x+1,-1));
    int ans=fun(n-1,x,num,dp);
    if(ans>=1e9)
     return -1;
    else
     return ans; 
}


// Bottom up Approach
int minimumElements(vector<int> &arr, int x)
{
    // Write your code here.
    int n=arr.size();
    vector<vector<int>>dp(n,vector<int>(x+1,0)); 
    for(int i=0;i<=x;i++){
       if(i%arr[0]==0)
         dp[0][i]=i/arr[0];
       else
         dp[0][i]=1e9;  
    }

    for(int i=1;i<n;i++){
      for(int j=0;j<=x;j++){
         int notake=dp[i-1][j];
         int take=INT_MAX;
        if(arr[i]<=j)
         take=1+dp[i][j-arr[i]];

         dp[i][j]=min(take,notake); 
      }
    }
      
    if(dp[n-1][x]>=1e9)
     return -1;
    else
     return dp[n-1][x]; 
}
